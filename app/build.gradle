apply plugin: 'com.android.application'
//引用bugly配置文件
apply from: "tinker-support.gradle"

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}

// config.gradle中配置
def ext = rootProject.ext
def version = ext.versions
def appPackage = ext.appID
def dependencie = ext.dependencies

//获取签名文件
def keystorePropertiesFile = rootProject.file("../MvpFrame/app/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion version.compileSdkVersion
    defaultConfig {
        applicationId appPackage.app
        minSdkVersion version.minSdkVersion
        targetSdkVersion version.targetSdkVersion
        versionCode version.versionCode
        versionName version.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        flavorDimensions "default"

        //个推配置
        manifestPlaceholders = [
                GETUI_APP_ID    : "QvgsUl69W68vXHGHvEB2MA",
                GETUI_APP_KEY   : "laVMmeV4GJ6quyGdUASte7",
                GETUI_APP_SECRET: "qxkzmsztKW8Y6kpzU5SMW4"
        ]

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86_64"
        }

    }
    // APK 签名
    signingConfigs {
        configRelease {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            // 设置混淆
            minifyEnabled false
            // 开发环境签名
            signingConfig signingConfigs.configRelease
        }
        release {
            // 设置混淆
            minifyEnabled false
            // 正式环境签名
            signingConfig signingConfigs.configRelease
            // 混淆配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationVariants.all { variant ->
//                variant.outputs.all { output ->
//                    outputFileName = "xiaodou_${releaseTime()}_v${variant.versionName}.apk"
//                }
//            }
        }
    }

    // 多渠道打包
    productFlavors {
        ontest {
            applicationId appPackage.test
            versionCode version.versionCode
            versionName version.versionName
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "ontest", APP_NAME: "慕享_测试"]
        }
        online {
            applicationId appPackage.app
            versionCode version.versionCode
            versionName version.versionName
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "online", APP_NAME: "慕享"]
        }
        huawei {
            applicationId appPackage.huawei
            versionCode version.versionCode
            versionName version.versionName
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "huawei", APP_NAME: "慕享_huawei"]
        }
        xiaomi {
            applicationId
            versionCode
            versionName
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi", APP_NAME: "慕享_xiaomi"]
        }
        tencent {
            applicationId
            versionCode
            versionName
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "tencent", APP_NAME: "慕享_tencent"]
        }
    }
    // 输出apk
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName
                if (variant.buildType.name == "release") {
                    // 输出apk名称为
                    fileName = "${variant.productFlavors[0].name}_${releaseTime()}_v${variant.versionName}.apk"
                } else {
                    fileName = "${variant.productFlavors[0].name}_${releaseTime()}_v${variant.versionName}_debug.apk"
                }
                outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '28.0.0'
                }
            }
        }
    }
}



dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':module_common')
//    implementation project(':lib_hotfix')//热更新模块
    //个推sdk
    implementation dependencie.getui

    //如果是集成模式下，才去依赖这些模块
    if (!isModule.toBoolean()) {
        api project(':module_core')
        api project(':module_home')
        api project(':module_find')
        api project(':module_task')
        api project(':module_my')
    }
    //黄油刀
    implementation dependencie.butterknife
    annotationProcessor dependencie.butterknife_compiler

}
